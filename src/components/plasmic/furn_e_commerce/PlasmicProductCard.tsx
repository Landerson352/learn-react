// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: izpLuD9XfjEg4waoVkj7iA
// Component: XuMN_M3Xg6uolp
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Ratings from '../../Ratings'; // plasmic-import: AYdZ6jQDwYWu6U/component

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_library_plasmic_color_type_css from '../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css'; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from './plasmic_furn_e_commerce.module.css'; // plasmic-import: izpLuD9XfjEg4waoVkj7iA/projectcss
import sty from './PlasmicProductCard.module.css'; // plasmic-import: XuMN_M3Xg6uolp/css

import ShoppingCartIcon from './icons/PlasmicIcon__ShoppingCart'; // plasmic-import: 2gRLbBKmsH-OH/icon
import HeartOIcon from './icons/PlasmicIcon__HeartO'; // plasmic-import: RngyH6-JSoWhf/icon
import ExpandIcon from './icons/PlasmicIcon__Expand'; // plasmic-import: bouj9ykPTtMd8/icon
import f123O4AHgXsu from './images/f1.jpeg'; // plasmic-import: 23o4_-aHG-Xsu/picture

export type PlasmicProductCard__VariantMembers = {
  withReviews: 'withReviews';
  onSale: 'onSale';
};

export type PlasmicProductCard__VariantsArgs = {
  withReviews?: SingleBooleanChoiceArg<'withReviews'>;
  onSale?: SingleBooleanChoiceArg<'onSale'>;
};

type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>(
  'withReviews',
  'onSale'
);

export type PlasmicProductCard__ArgsType = {
  title?: React.ReactNode;
  price?: React.ReactNode;
  image?: React.ReactNode;
  ratings?: React.ReactNode;
  imgSrc?: React.ComponentProps<typeof p.PlasmicImg>['src'];
};

type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  'title',
  'price',
  'image',
  'ratings',
  'imgSrc'
);

export type PlasmicProductCard__OverridesType = {
  root?: p.Flex<'div'>;
};

export interface DefaultProductCardProps {
  title?: React.ReactNode;
  price?: React.ReactNode;
  image?: React.ReactNode;
  ratings?: React.ReactNode;
  imgSrc?: React.ComponentProps<typeof p.PlasmicImg>['src'];
  withReviews?: SingleBooleanChoiceArg<'withReviews'>;
  onSale?: SingleBooleanChoiceArg<'onSale'>;
  className?: string;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger('useHover', {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootonSale]: hasVariant(variants, 'onSale', 'onSale'),
          [sty.rootwithReviews]: hasVariant(
            variants,
            'withReviews',
            'withReviews'
          ),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wGMn8)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={''}
              className={classNames(sty.img__zNor)}
              displayHeight={'auto' as const}
              displayMaxHeight={'none' as const}
              displayMaxWidth={'none' as const}
              displayMinHeight={'0' as const}
              displayMinWidth={'0' as const}
              displayWidth={'100%' as const}
              src={{
                src: f123O4AHgXsu,
                fullWidth: 270,
                fullHeight: 310,
                aspectRatio: undefined,
              }}
            />
          ),

          value: args.image,
        })}

        {(hasVariant(variants, 'onSale', 'onSale') ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__gh6Ra, {
              [sty.freeBoxonSale__gh6RaGmNy0]: hasVariant(
                variants,
                'onSale',
                'onSale'
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__njfoc
              )}
            >
              {'Sale'}
            </div>
          </div>
        ) : null}
        {(triggers.hover_root ? true : true) ? (
          <p.Stack
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oKrhl)}
          >
            <ShoppingCartIcon
              className={classNames(projectcss.all, sty.svg__gdgTf)}
              role={'img'}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yBuPa
              )}
            >
              {'Add to cart'}
            </div>

            <HeartOIcon
              className={classNames(projectcss.all, sty.svg__xss2M)}
              role={'img'}
            />

            <ExpandIcon
              className={classNames(projectcss.all, sty.svg__y0Sbg)}
              role={'img'}
            />
          </p.Stack>
        ) : null}
      </div>

      {(hasVariant(variants, 'withReviews', 'withReviews') ? true : true)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Ratings
                className={classNames('__wab_instance', sty.ratings__tjxCu)}
              />
            ),

            value: args.ratings,
          })
        : null}

      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___1LWs)}
      >
        {p.renderPlasmicSlot({
          defaultContents: 'Title',
          value: args.title,
          className: classNames(sty.slotTargetTitle),
        })}

        {p.renderPlasmicSlot({
          defaultContents: '$100',
          value: args.price,
          className: classNames(sty.slotTargetPrice),
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps,
    });

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicProductCard';
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps,
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
