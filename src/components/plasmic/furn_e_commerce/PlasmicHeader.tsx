// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: izpLuD9XfjEg4waoVkj7iA
// Component: RIHzkpHfYmQDH
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import MenuButton from '../../MenuButton'; // plasmic-import: AcS62u6N3jxljG/component
import LinkButton from '../../LinkButton'; // plasmic-import: RBbXaPsyk7f7zM/component
import IconLink from '../../IconLink'; // plasmic-import: e9zLDLifxsP30Z/component

import { useScreenVariants as useScreenVariants_9LdGg6IuIx6DD } from './PlasmicGlobalVariant__Screen'; // plasmic-import: 9LdGg6iuIX6dD-/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_library_plasmic_color_type_css from '../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css'; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from './plasmic_furn_e_commerce.module.css'; // plasmic-import: izpLuD9XfjEg4waoVkj7iA/projectcss
import sty from './PlasmicHeader.module.css'; // plasmic-import: RIHzkpHfYmQDH/css

import SearchIcon from './icons/PlasmicIcon__Search'; // plasmic-import: XqyO9g66w1SEY/icon
import CogIcon from './icons/PlasmicIcon__Cog'; // plasmic-import: _E4PzdJoxNeuZ/icon
import ShoppingCartIcon from './icons/PlasmicIcon__ShoppingCart'; // plasmic-import: 2gRLbBKmsH-OH/icon
import plasmicU6JykaFszZbk3 from './images/plasmic.png'; // plasmic-import: u6jykaFszZBK3/picture

export type PlasmicHeader__VariantMembers = {
  expanded: 'expanded';
};

export type PlasmicHeader__VariantsArgs = {
  expanded?: SingleBooleanChoiceArg<'expanded'>;
};

type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  'expanded'
);

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<'div'>;
  menuButton?: p.Flex<typeof MenuButton>;
  link?: p.Flex<'a'>;
  img?: p.Flex<typeof p.PlasmicImg>;
  searchLink?: p.Flex<typeof IconLink>;
  cogLink?: p.Flex<typeof IconLink>;
  cartLink?: p.Flex<typeof IconLink>;
};

export interface DefaultHeaderProps {
  expanded?: SingleBooleanChoiceArg<'expanded'>;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_9LdGg6IuIx6DD(),
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        { [sty.rootexpanded]: hasVariant(variants, 'expanded', 'expanded') }
      )}
    >
      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__it6Bk)}
      >
        {(hasVariant(globalVariants, 'screen', 'mobile') ? true : true) ? (
          <MenuButton
            data-plasmic-name={'menuButton'}
            data-plasmic-override={overrides.menuButton}
            className={classNames('__wab_instance', sty.menuButton, {
              [sty.menuButtonexpanded]: hasVariant(
                variants,
                'expanded',
                'expanded'
              ),
            })}
            expanded={
              hasVariant(variants, 'expanded', 'expanded') &&
              hasVariant(globalVariants, 'screen', 'mobile')
                ? true
                : undefined
            }
          />
        ) : null}

        <a
          data-plasmic-name={'link'}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          href={'/' as const}
        >
          <p.PlasmicImg
            data-plasmic-name={'img'}
            data-plasmic-override={overrides.img}
            alt={''}
            className={classNames(sty.img)}
            displayHeight={'auto' as const}
            displayMaxHeight={'none' as const}
            displayMaxWidth={'none' as const}
            displayMinHeight={'0' as const}
            displayMinWidth={'0' as const}
            displayWidth={'100%' as const}
            src={{
              src: plasmicU6JykaFszZbk3,
              fullWidth: 3216,
              fullHeight: 624,
              aspectRatio: undefined,
            }}
          />
        </a>

        {(
          hasVariant(variants, 'expanded', 'expanded') &&
          hasVariant(globalVariants, 'screen', 'mobile')
            ? true
            : hasVariant(globalVariants, 'screen', 'mobile')
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__nwfOt, {
              [sty.freeBoxexpanded__nwfOttOzpA]: hasVariant(
                variants,
                'expanded',
                'expanded'
              ),
            })}
          >
            <LinkButton
              className={classNames('__wab_instance', sty.linkButton__yiI70)}
              href={'/#home' as const}
              size={'small' as const}
              text={'Home'}
              type={'blankGray' as const}
            />

            <LinkButton
              className={classNames('__wab_instance', sty.linkButton__rG14E)}
              href={'/#new-arrival' as const}
              size={'small' as const}
              text={'New Arrival'}
              type={'blankGray' as const}
            />

            <LinkButton
              className={classNames('__wab_instance', sty.linkButton__pIbQd)}
              href={'/#features' as const}
              size={'small' as const}
              text={'Features'}
              type={'blankGray' as const}
            />

            <LinkButton
              className={classNames('__wab_instance', sty.linkButton__jlTSv)}
              href={'/#blog' as const}
              size={'small' as const}
              text={'Blog'}
              type={'blankGray' as const}
            />

            <LinkButton
              className={classNames('__wab_instance', sty.linkButton__oJLlb)}
              href={'/#contact' as const}
              size={'small' as const}
              text={'Contact'}
              type={'blankGray' as const}
            />
          </div>
        ) : null}

        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cuCaZ)}
        >
          <IconLink
            data-plasmic-name={'searchLink'}
            data-plasmic-override={overrides.searchLink}
            className={classNames('__wab_instance', sty.searchLink)}
            icon={
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__qEfBi)}
                role={'img'}
              />
            }
          />

          <IconLink
            data-plasmic-name={'cogLink'}
            data-plasmic-override={overrides.cogLink}
            className={classNames('__wab_instance', sty.cogLink)}
            icon={
              <CogIcon
                className={classNames(projectcss.all, sty.svg__cRxbq)}
                role={'img'}
              />
            }
          />

          <IconLink
            data-plasmic-name={'cartLink'}
            data-plasmic-override={overrides.cartLink}
            className={classNames('__wab_instance', sty.cartLink)}
            icon={
              <ShoppingCartIcon
                className={classNames(projectcss.all, sty.svg__kaXma)}
                role={'img'}
              />
            }
          />
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, 'expanded', 'expanded') &&
        hasVariant(globalVariants, 'screen', 'mobile')
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__xUoU, {
            [sty.freeBoxexpanded__xUoUtOzpA]: hasVariant(
              variants,
              'expanded',
              'expanded'
            ),
          })}
        >
          <LinkButton
            className={classNames('__wab_instance', sty.linkButton___2QEdx)}
            text={'Home'}
            type={'blankGray' as const}
          />

          <LinkButton
            className={classNames('__wab_instance', sty.linkButton__sjS0L)}
            text={'New Arrival'}
            type={'blankGray' as const}
          />

          <LinkButton
            className={classNames('__wab_instance', sty.linkButton__lVSmQ)}
            text={'Features'}
            type={'blankGray' as const}
          />

          <LinkButton
            className={classNames('__wab_instance', sty.linkButton__tyNfi)}
            text={'Blog'}
            type={'blankGray' as const}
          />

          <LinkButton
            className={classNames('__wab_instance', sty.linkButton__jslti)}
            text={'Contact'}
            type={'blankGray' as const}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'menuButton',
    'link',
    'img',
    'searchLink',
    'cogLink',
    'cartLink',
  ],
  menuButton: ['menuButton'],
  link: ['link', 'img'],
  img: ['img'],
  searchLink: ['searchLink'],
  cogLink: ['cogLink'],
  cartLink: ['cartLink'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  menuButton: typeof MenuButton;
  link: 'a';
  img: typeof p.PlasmicImg;
  searchLink: typeof IconLink;
  cogLink: typeof IconLink;
  cartLink: typeof IconLink;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps,
    });

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicHeader';
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent('menuButton'),
    link: makeNodeComponent('link'),
    img: makeNodeComponent('img'),
    searchLink: makeNodeComponent('searchLink'),
    cogLink: makeNodeComponent('cogLink'),
    cartLink: makeNodeComponent('cartLink'),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps,
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
