// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: izpLuD9XfjEg4waoVkj7iA
// Component: vNbrVLPgRg9Evc
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import LinkButton from '../../LinkButton'; // plasmic-import: RBbXaPsyk7f7zM/component

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_library_plasmic_color_type_css from '../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css'; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from './plasmic_furn_e_commerce.module.css'; // plasmic-import: izpLuD9XfjEg4waoVkj7iA/projectcss
import sty from './PlasmicProductCarousel.module.css'; // plasmic-import: vNbrVLPgRg9Evc/css

import DotCircleOIcon from './icons/PlasmicIcon__DotCircleO'; // plasmic-import: ln6o0MoPngyoE/icon
import CircleOIcon from './icons/PlasmicIcon__CircleO'; // plasmic-import: 5YsFJo8XfJ7Qt/icon
import slider1Fg94K0QbDg7C5 from './images/slider1.png'; // plasmic-import: FG94k0qbDg7C5/picture
import slider2CkhWwwpwx9YX from './images/slider2.png'; // plasmic-import: CkhWwwpwx9y_X/picture
import slider3NiWt2HoATxRs from './images/slider3.png'; // plasmic-import: NIWt2-hoATxRS/picture

export type PlasmicProductCarousel__VariantMembers = {
  slider: 'first' | 'second' | 'third';
};

export type PlasmicProductCarousel__VariantsArgs = {
  slider?: SingleChoiceArg<'first' | 'second' | 'third'>;
};

type VariantPropType = keyof PlasmicProductCarousel__VariantsArgs;
export const PlasmicProductCarousel__VariantProps = new Array<VariantPropType>(
  'slider'
);

export type PlasmicProductCarousel__ArgsType = {};
type ArgPropType = keyof PlasmicProductCarousel__ArgsType;
export const PlasmicProductCarousel__ArgProps = new Array<ArgPropType>();

export type PlasmicProductCarousel__OverridesType = {
  root?: p.Flex<'div'>;
  collectionName?: p.Flex<'div'>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultProductCarouselProps {
  slider?: SingleChoiceArg<'first' | 'second' | 'third'>;
  className?: string;
}

function PlasmicProductCarousel__RenderFunc(props: {
  variants: PlasmicProductCarousel__VariantsArgs;
  args: PlasmicProductCarousel__ArgsType;
  overrides: PlasmicProductCarousel__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xNadE)}>
        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mxe1N, {
            [sty.freeBoxslider_second__mxe1NeQsMv]: hasVariant(
              variants,
              'slider',
              'second'
            ),
          })}
        >
          <div
            data-plasmic-name={'collectionName'}
            data-plasmic-override={overrides.collectionName}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.collectionName
            )}
          >
            {'Great Design Collection'}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mIl9P,
              {
                [sty.textslider_first__mIl9Ps6WV5]: hasVariant(
                  variants,
                  'slider',
                  'first'
                ),
                [sty.textslider_second__mIl9PeQsMv]: hasVariant(
                  variants,
                  'slider',
                  'second'
                ),
                [sty.textslider_third__mIl9PiYzF2]: hasVariant(
                  variants,
                  'slider',
                  'third'
                ),
              }
            )}
          >
            {hasVariant(variants, 'slider', 'third')
              ? 'Valvet Accent Arm Chair'
              : hasVariant(variants, 'slider', 'second')
              ? 'Mapple Wood Accent Chair'
              : 'Cloth Covered Accent Chair'}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nZ08
            )}
          >
            {
              'Lorem ipsum dolor sit amet consectetur adipisicing elit nemo expedita voluptas culpa sapiente.'
            }
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___3DC8A)}>
            <div className={classNames(projectcss.all, sty.freeBox__oAoXl)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__e4Dc,
                {
                  [sty.textslider_second__e4DcEQsMv]: hasVariant(
                    variants,
                    'slider',
                    'second'
                  ),
                  [sty.textslider_third__e4DcIYzF2]: hasVariant(
                    variants,
                    'slider',
                    'third'
                  ),
                }
              )}
            >
              {hasVariant(variants, 'slider', 'third')
                ? ' $299.00'
                : hasVariant(variants, 'slider', 'second')
                ? ' $199.00'
                : ' $399.00'}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bLf3W,
                {
                  [sty.textslider_first__bLf3Ws6WV5]: hasVariant(
                    variants,
                    'slider',
                    'first'
                  ),
                  [sty.textslider_second__bLf3WeQsMv]: hasVariant(
                    variants,
                    'slider',
                    'second'
                  ),
                  [sty.textslider_third__bLf3WiYzF2]: hasVariant(
                    variants,
                    'slider',
                    'third'
                  ),
                }
              )}
            >
              {hasVariant(variants, 'slider', 'third')
                ? ' $399.00'
                : hasVariant(variants, 'slider', 'second')
                ? ' $299.00'
                : ' $499.00'}
            </div>
          </div>

          <p.Stack
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tYlaJ)}
          >
            <LinkButton
              className={classNames('__wab_instance', sty.linkButton__rprIa)}
              text={'âŠ• Add to cart'}
              type={'solidOrange' as const}
            />

            <LinkButton
              className={classNames('__wab_instance', sty.linkButton__dLhhu)}
              href={'' as const}
              text={'More Info'}
              type={'blankOrange' as const}
            />
          </p.Stack>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__ohDwH)}>
          <p.PlasmicImg
            data-plasmic-name={'img'}
            data-plasmic-override={overrides.img}
            alt={'' as const}
            className={classNames(sty.img, {
              [sty.imgslider_first]: hasVariant(variants, 'slider', 'first'),
              [sty.imgslider_second]: hasVariant(variants, 'slider', 'second'),
              [sty.imgslider_third]: hasVariant(variants, 'slider', 'third'),
            })}
            displayHeight={'auto' as const}
            displayMaxHeight={'none' as const}
            displayMaxWidth={'none' as const}
            displayMinHeight={'0' as const}
            displayMinWidth={'0' as const}
            displayWidth={'100%' as const}
            src={
              hasVariant(variants, 'slider', 'third')
                ? {
                    src: slider3NiWt2HoATxRs,
                    fullWidth: 553,
                    fullHeight: 475,
                    aspectRatio: undefined,
                  }
                : hasVariant(variants, 'slider', 'second')
                ? {
                    src: slider2CkhWwwpwx9YX,
                    fullWidth: 528,
                    fullHeight: 559,
                    aspectRatio: undefined,
                  }
                : {
                    src: slider1Fg94K0QbDg7C5,
                    fullWidth: 507,
                    fullHeight: 549,
                    aspectRatio: undefined,
                  }
            }
          />
        </div>
      </div>

      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__cx0CA)}
      >
        <p.PlasmicIcon
          PlasmicIconType={
            hasVariant(variants, 'slider', 'third')
              ? CircleOIcon
              : hasVariant(variants, 'slider', 'second')
              ? CircleOIcon
              : DotCircleOIcon
          }
          className={classNames(projectcss.all, sty.svg__fU9HN, {
            [sty.svgslider_second__fU9HNeQsMv]: hasVariant(
              variants,
              'slider',
              'second'
            ),
            [sty.svgslider_third__fU9HNiYzF2]: hasVariant(
              variants,
              'slider',
              'third'
            ),
          })}
          role={'img'}
        />

        <p.PlasmicIcon
          PlasmicIconType={
            hasVariant(variants, 'slider', 'second')
              ? DotCircleOIcon
              : CircleOIcon
          }
          className={classNames(projectcss.all, sty.svg__x1M0Q, {
            [sty.svgslider_first__x1M0Qs6WV5]: hasVariant(
              variants,
              'slider',
              'first'
            ),
            [sty.svgslider_second__x1M0QeQsMv]: hasVariant(
              variants,
              'slider',
              'second'
            ),
            [sty.svgslider_third__x1M0QiYzF2]: hasVariant(
              variants,
              'slider',
              'third'
            ),
          })}
          role={'img'}
        />

        <p.PlasmicIcon
          PlasmicIconType={
            hasVariant(variants, 'slider', 'third')
              ? DotCircleOIcon
              : CircleOIcon
          }
          className={classNames(projectcss.all, sty.svg__coURn, {
            [sty.svgslider_third__coURniYzF2]: hasVariant(
              variants,
              'slider',
              'third'
            ),
          })}
          role={'img'}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'collectionName', 'img'],
  collectionName: ['collectionName'],
  img: ['img'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  collectionName: 'div';
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCarousel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCarousel__VariantsArgs;
    args?: PlasmicProductCarousel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCarousel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCarousel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCarousel__ArgProps,
      internalVariantPropNames: PlasmicProductCarousel__VariantProps,
    });

    return PlasmicProductCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicProductCarousel';
  } else {
    func.displayName = `PlasmicProductCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCarousel = Object.assign(
  // Top-level PlasmicProductCarousel renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    collectionName: makeNodeComponent('collectionName'),
    img: makeNodeComponent('img'),

    // Metadata about props expected for PlasmicProductCarousel
    internalVariantProps: PlasmicProductCarousel__VariantProps,
    internalArgProps: PlasmicProductCarousel__ArgProps,
  }
);

export default PlasmicProductCarousel;
/* prettier-ignore-end */
